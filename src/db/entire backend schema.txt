pdf document:

CREATE TABLE IF NOT EXISTS public.pdf_documents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  
  -- Who created this report (linked to examiners)
  examiner_id UUID REFERENCES public.examiners(id) ON DELETE SET NULL,

  -- Report Type: 'individual report', 'examiner report', 'merged report', 'custom report'
  report_type TEXT NOT NULL CHECK (report_type IN ('individual report', 'examiner report', 'merged report', 'custom report')),

  -- Optional: Calculation ID (only if itâ€™s linked to a specific calculation)
  calculation_id UUID REFERENCES public.calculation_documents(id) ON DELETE SET NULL,

  -- File storage
  pdf_url TEXT,

  -- Optional: Store metadata for regenerating later
  filters JSONB,

  -- Name shown in the archive page
  report_name TEXT NOT NULL,

  -- Is this report favorited by user
  is_favorite BOOLEAN DEFAULT FALSE,

  -- Date generated
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.pdf_documents ENABLE ROW LEVEL SECURITY;

-- Policy: User can access only their own reports
CREATE POLICY "User can access their PDF reports"
  ON public.pdf_documents
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = pdf_documents.examiner_id
      AND examiners.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = pdf_documents.examiner_id
      AND examiners.user_id = auth.uid()
    )
  );

calculation days:

CREATE TABLE IF NOT EXISTS public.calculation_days (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  calculation_id uuid NOT NULL REFERENCES public.calculation_documents(id) ON DELETE CASCADE,
  evaluation_day_id uuid NOT NULL REFERENCES public.evaluation_days(id) ON DELETE CASCADE,
  created_at timestamp with time zone DEFAULT now()
);

ALTER TABLE public.calculation_days ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow access to user's calculation_days"
  ON public.calculation_days
  FOR all
  USING (
    EXISTS (
      SELECT 1
      FROM public.calculation_documents cd
      JOIN public.examiners e ON cd.examiner_id = e.id
      WHERE cd.id = calculation_days.calculation_id
        AND e.user_id = (select auth.uid())
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1
      FROM public.calculation_documents cd
      JOIN public.examiners e ON cd.examiner_id = e.id
      WHERE cd.id = calculation_days.calculation_id
        AND e.user_id = (select auth.uid())
    )
  );

calculation documents: 

CREATE TABLE IF NOT EXISTS public.calculation_documents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  examiner_id UUID NOT NULL REFERENCES public.examiners(id) ON DELETE CASCADE,
  total_papers INTEGER NOT NULL,
  total_staff INTEGER NOT NULL,
  base_salary NUMERIC(10, 2) NOT NULL,
  incentive NUMERIC(10, 2) NOT NULL,
  final_amount NUMERIC(10, 2) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

ALTER TABLE public.calculation_documents ENABLE ROW LEVEL SECURITY;

CREATE POLICY "User can access their calculation documents"
  ON public.calculation_documents
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = calculation_documents.examiner_id
      AND examiners.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = calculation_documents.examiner_id
      AND examiners.user_id = auth.uid()
    )
  );

SELECT * FROM calculation_documents LIMIT 1;

staff evaluations:

CREATE TABLE IF NOT EXISTS public.staff_evaluations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  evaluation_day_id UUID NOT NULL REFERENCES public.evaluation_days(id) ON DELETE CASCADE,
  staff_name TEXT NOT NULL,
  papers_evaluated INTEGER NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

ALTER TABLE public.staff_evaluations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "User can access their staff evaluations"
  ON public.staff_evaluations
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM public.evaluation_days
      WHERE evaluation_days.id = staff_evaluations.evaluation_day_id
      AND EXISTS (
        SELECT 1 FROM public.examiners
        WHERE examiners.id = evaluation_days.examiner_id
        AND examiners.user_id = auth.uid()
      )
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.evaluation_days
      WHERE evaluation_days.id = staff_evaluations.evaluation_day_id
      AND EXISTS (
        SELECT 1 FROM public.examiners
        WHERE examiners.id = evaluation_days.examiner_id
        AND examiners.user_id = auth.uid()
      )
    )
  );

evaluation days:

CREATE TABLE IF NOT EXISTS public.evaluation_days (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  examiner_id UUID NOT NULL REFERENCES public.examiners(id) ON DELETE CASCADE,
  evaluation_date DATE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

ALTER TABLE public.evaluation_days ENABLE ROW LEVEL SECURITY;

CREATE POLICY "User can access their evaluation days"
  ON public.evaluation_days
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = evaluation_days.examiner_id
      AND examiners.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.examiners
      WHERE examiners.id = evaluation_days.examiner_id
      AND examiners.user_id = auth.uid()
    )
  );



SELECT id, evaluation_date FROM public.evaluation_days
WHERE id IN (
  'bf281158-423a-43db-94c3-1f1e6b4e9248',
  'f921e717-335b-45b3-843f-e7c7514c9689'
);

